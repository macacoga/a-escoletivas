#!/usr/bin/env python3
"""
Script de Demonstra√ß√£o - Como Usar a Ferramenta de A√ß√µes Coletivas
"""

import requests
import json
import time
import sys
from datetime import datetime

# Configura√ß√µes da API
API_BASE_URL = "http://localhost:5000"
API_TIMEOUT = 10

def print_header(title):
    """Imprime cabe√ßalho formatado"""
    print("\n" + "="*60)
    print(f"üéØ {title}")
    print("="*60)

def print_section(title):
    """Imprime se√ß√£o formatada"""
    print(f"\nüìã {title}")
    print("-" * 40)

def check_api_status():
    """Verifica se a API est√° rodando"""
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=API_TIMEOUT)
        if response.status_code == 200:
            print("‚úÖ API est√° funcionando!")
            return True
        else:
            print(f"‚ùå API retornou status {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro ao conectar com a API: {e}")
        print("\nüí° Certifique-se de que a API est√° rodando:")
        print("   python start_api.py")
        return False

def demo_listar_acoes():
    """Demonstra como listar a√ß√µes"""
    print_section("Listando A√ß√µes (Primeira p√°gina)")
    
    try:
        response = requests.get(
            f"{API_BASE_URL}/api/acoes",
            params={"page": 1, "per_page": 5},
            timeout=API_TIMEOUT
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"üìä Total de a√ß√µes: {data['total']}")
            print(f"üìÑ P√°gina atual: {data['page']}")
            print(f"üìã A√ß√µes por p√°gina: {data['per_page']}")
            
            print("\nüìã Primeiras a√ß√µes:")
            for i, acao in enumerate(data['acoes'][:3], 1):
                print(f"  {i}. Processo: {acao['numero_processo']}")
                print(f"     Tribunal: {acao['tribunal']}")
                print(f"     Data: {acao['data_publicacao']}")
                if acao.get('resumo'):
                    print(f"     Resumo: {acao['resumo'][:100]}...")
                print()
        else:
            print(f"‚ùå Erro: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")

def demo_buscar_acoes():
    """Demonstra como buscar a√ß√µes"""
    print_section("Buscando A√ß√µes por Palavras-chave")
    
    try:
        # Buscar por palavras-chave
        response = requests.get(
            f"{API_BASE_URL}/api/acoes/search",
            params={
                "keywords": "banco",
                "page": 1,
                "per_page": 3
            },
            timeout=API_TIMEOUT
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"üîç Busca por 'banco' - Encontradas: {data['total']} a√ß√µes")
            
            if data['acoes']:
                print("\nüìã Resultados:")
                for i, acao in enumerate(data['acoes'], 1):
                    print(f"  {i}. {acao['numero_processo']} - {acao['tribunal']}")
                    if acao.get('palavras_chave'):
                        print(f"     Palavras-chave: {', '.join(acao['palavras_chave'][:3])}")
            else:
                print("   Nenhuma a√ß√£o encontrada")
        else:
            print(f"‚ùå Erro: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")

def demo_detalhes_acao():
    """Demonstra como ver detalhes de uma a√ß√£o"""
    print_section("Detalhes de uma A√ß√£o Espec√≠fica")
    
    try:
        # Primeiro, pegar uma a√ß√£o da lista
        response = requests.get(
            f"{API_BASE_URL}/api/acoes",
            params={"page": 1, "per_page": 1},
            timeout=API_TIMEOUT
        )
        
        if response.status_code == 200:
            data = response.json()
            if data['acoes']:
                acao_id = data['acoes'][0]['id']
                
                # Agora buscar detalhes
                response = requests.get(
                    f"{API_BASE_URL}/api/acoes/{acao_id}",
                    timeout=API_TIMEOUT
                )
                
                if response.status_code == 200:
                    acao = response.json()
                    print(f"üìã A√ß√£o ID: {acao['id']}")
                    print(f"   Processo: {acao['numero_processo']}")
                    print(f"   Tribunal: {acao['tribunal']}")
                    print(f"   Classe: {acao['classe_processo']}")
                    print(f"   Data: {acao['data_publicacao']}")
                    print(f"   Relator: {acao['relator']}")
                    
                    if acao.get('resumo'):
                        print(f"   Resumo: {acao['resumo'][:200]}...")
                    
                    if acao.get('palavras_chave'):
                        print(f"   Palavras-chave: {', '.join(acao['palavras_chave'])}")
                    
                    if acao.get('tema_principal'):
                        print(f"   Tema: {acao['tema_principal']}")
                else:
                    print(f"‚ùå Erro ao buscar detalhes: {response.status_code}")
            else:
                print("   Nenhuma a√ß√£o dispon√≠vel")
        else:
            print(f"‚ùå Erro: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")

def demo_topicos():
    """Demonstra como listar t√≥picos"""
    print_section("T√≥picos Mais Frequentes")
    
    try:
        response = requests.get(
            f"{API_BASE_URL}/api/topicos",
            params={"limit": 10},
            timeout=API_TIMEOUT
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"üìä Total de t√≥picos: {len(data['topicos'])}")
            
            print("\nüè∑Ô∏è  T√≥picos mais frequentes:")
            for i, topico in enumerate(data['topicos'][:5], 1):
                print(f"  {i}. {topico['tema']} ({topico['frequencia']} ocorr√™ncias)")
        else:
            print(f"‚ùå Erro: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")

def demo_estatisticas():
    """Demonstra como ver estat√≠sticas"""
    print_section("Estat√≠sticas Gerais")
    
    try:
        response = requests.get(
            f"{API_BASE_URL}/api/stats/geral",
            timeout=API_TIMEOUT
        )
        
        if response.status_code == 200:
            stats = response.json()
            print("üìä Estat√≠sticas do Sistema:")
            print(f"   Total de a√ß√µes: {stats['total_acoes']}")
            print(f"   A√ß√µes com resumo: {stats['acoes_com_resumo']}")
            print(f"   A√ß√µes com palavras-chave: {stats['acoes_com_palavras_chave']}")
            print(f"   A√ß√µes com tema: {stats['acoes_com_tema']}")
            print(f"   Tribunais √∫nicos: {stats['tribunais_unicos']}")
            print(f"   Per√≠odo: {stats['data_mais_antiga']} a {stats['data_mais_recente']}")
        else:
            print(f"‚ùå Erro: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")

def demo_busca_avancada():
    """Demonstra busca avan√ßada"""
    print_section("Busca Avan√ßada (M√∫ltiplos Filtros)")
    
    try:
        # Buscar a√ß√µes de 2023 com palavras espec√≠ficas
        response = requests.get(
            f"{API_BASE_URL}/api/acoes/search",
            params={
                "keywords": "trabalho",
                "data_inicio": "2023-01-01",
                "data_fim": "2023-12-31",
                "page": 1,
                "per_page": 3
            },
            timeout=API_TIMEOUT
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"üîç Busca avan√ßada - Encontradas: {data['total']} a√ß√µes")
            print("   Filtros: 'trabalho' + per√≠odo 2023")
            
            if data['acoes']:
                print("\nüìã Resultados:")
                for i, acao in enumerate(data['acoes'], 1):
                    print(f"  {i}. {acao['numero_processo']}")
                    print(f"     Data: {acao['data_publicacao']}")
                    print(f"     Tribunal: {acao['tribunal']}")
            else:
                print("   Nenhuma a√ß√£o encontrada")
        else:
            print(f"‚ùå Erro: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")

def mostrar_urls_uteis():
    """Mostra URLs √∫teis da API"""
    print_section("URLs √öteis da API")
    
    urls = [
        ("üè† P√°gina Principal", f"{API_BASE_URL}/"),
        ("üìö Documenta√ß√£o", f"{API_BASE_URL}/api/docs/"),
        ("‚ù§Ô∏è  Health Check", f"{API_BASE_URL}/health"),
        ("üìã Listar A√ß√µes", f"{API_BASE_URL}/api/acoes"),
        ("üîç Buscar A√ß√µes", f"{API_BASE_URL}/api/acoes/search"),
        ("üè∑Ô∏è  T√≥picos", f"{API_BASE_URL}/api/topicos"),
        ("üìä Estat√≠sticas", f"{API_BASE_URL}/api/stats/geral"),
    ]
    
    for nome, url in urls:
        print(f"   {nome}: {url}")

def main():
    """Fun√ß√£o principal"""
    print_header("DEMONSTRA√á√ÉO - FERRAMENTA DE A√á√ïES COLETIVAS")
    
    print("üéØ Este script demonstra como usar a API da ferramenta")
    print("üí° Certifique-se de que a API est√° rodando (python start_api.py)")
    
    # Verificar se API est√° rodando
    if not check_api_status():
        return
    
    # Executar demonstra√ß√µes
    demo_estatisticas()
    demo_listar_acoes()
    demo_buscar_acoes()
    demo_detalhes_acao()
    demo_topicos()
    demo_busca_avancada()
    
    print_header("RESUMO DA DEMONSTRA√á√ÉO")
    
    print("‚úÖ Demonstra√ß√µes conclu√≠das!")
    print("\nüéØ Principais funcionalidades testadas:")
    print("   üìã Listagem de a√ß√µes com pagina√ß√£o")
    print("   üîç Busca por palavras-chave")
    print("   üìÑ Visualiza√ß√£o de detalhes")
    print("   üè∑Ô∏è  Listagem de t√≥picos")
    print("   üìä Estat√≠sticas gerais")
    print("   üîç Busca avan√ßada com filtros")
    
    mostrar_urls_uteis()
    
    print("\nüí° Pr√≥ximos passos:")
    print("   1. Explore a documenta√ß√£o Swagger")
    print("   2. Teste diferentes filtros de busca")
    print("   3. Integre com suas ferramentas")
    print("   4. Use os dados para an√°lise")
    
    print("\nüéâ Sua ferramenta est√° pronta para uso!")

if __name__ == "__main__":
    main() 